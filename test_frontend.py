#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º
"""

import requests
import json
import time

BASE_URL = "http://127.0.0.1:8000/api"

def test_api():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±—ç–∫–µ–Ω–¥–∞...")
    
    # –¢–µ—Å—Ç health
    print("\n1. –¢–µ—Å—Ç health endpoint:")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç devices
    print("\n2. –¢–µ—Å—Ç devices endpoint:")
    try:
        response = requests.get(f"{BASE_URL}/devices")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Microphones: {data.get('microphones', [])}")
        print(f"   Selected: {data.get('selected', 'N/A')}")
        print(f"   BlackHole present: {data.get('blackhole_present', False)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç state
    print("\n3. –¢–µ—Å—Ç state endpoint:")
    try:
        response = requests.get(f"{BASE_URL}/state")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Recording: {data.get('recording', False)}")
        print(f"   Paused: {data.get('paused', False)}")
        print(f"   Mic gain: {data.get('mic_gain', 0)}")
        print(f"   BlackHole gain: {data.get('blackhole_gain', 0)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç transcript
    print("\n4. –¢–µ—Å—Ç transcript endpoint:")
    try:
        response = requests.get(f"{BASE_URL}/transcript")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Text length: {len(data.get('text', ''))}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç settings update
    print("\n5. –¢–µ—Å—Ç settings update:")
    try:
        settings = {
            "mic_gain": 1.2,
            "blackhole_gain": 0.8
        }
        response = requests.post(f"{BASE_URL}/settings", json=settings)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Response: {data}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_websocket():
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    
    try:
        import websocket
        import threading
        
        def on_message(ws, message):
            print(f"   üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
        
        def on_error(ws, error):
            print(f"   ‚ùå WebSocket –æ—à–∏–±–∫–∞: {error}")
        
        def on_close(ws, close_status_code, close_msg):
            print("   üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        def on_open(ws):
            print("   ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç transcript WebSocket
        print("\n1. –¢–µ—Å—Ç transcript WebSocket:")
        ws_transcript = websocket.WebSocketApp(
            "ws://127.0.0.1:8000/ws/transcript",
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        wst = threading.Thread(target=ws_transcript.run_forever)
        wst.daemon = True
        wst.start()
        
        time.sleep(2)
        ws_transcript.close()
        
        # –¢–µ—Å—Ç levels WebSocket
        print("\n2. –¢–µ—Å—Ç levels WebSocket:")
        ws_levels = websocket.WebSocketApp(
            "ws://127.0.0.1:8000/ws/levels",
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        wsl = threading.Thread(target=ws_levels.run_forever)
        wsl.daemon = True
        wsl.start()
        
        time.sleep(2)
        ws_levels.close()
        
    except ImportError:
        print("   ‚ö†Ô∏è  websocket-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install websocket-client")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –±—ç–∫–µ–Ω–¥–æ–º")
    print("=" * 60)
    
    test_api()
    test_websocket()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://127.0.0.1:8000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤")
    print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ DevTools")
